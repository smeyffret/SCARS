package fr.cnrs.liris.scars.scorer.social.impl

import org.scalatest.FunSuite
import org.scalatest.matchers.ShouldMatchers
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import fr.cnrs.liris.scars.api._
import fr.cnrs.liris.scars.api.Conversion._
import fr.cnrs.liris.scars.scorer.social._
import fr.cnrs.liris.scars.scorer.social.feature.Trust
import fr.cnrs.liris.scars.test.Conversion._
import parent.SingleParent
import fr.cnrs.liris.scars.test.SocialScorerTool

/**
 * @author  Simon Meyffret
 * @version 0.0.1
 * @since   scala 2.8
 * Date: 9 dÃ©c. 2010
 * Time: 12:32:04
 */

@RunWith(classOf[JUnitRunner])
class ActorSocialScorerSimpleTest extends FunSuite with ShouldMatchers {

  val nbUser = 5
  implicit val database = new MockDatabase()
  import database.trust
  (1 to nbUser) foreach { user => ((user + 1) to nbUser) foreach {other =>
    trust(user, other, 1)
  }}

  val nbItem = 3
  database(1, 1) = 1.2
  database(2, 1) = 2.1; database(2, 2) = 2.2; database(2, 3) = 2.3
  database(3, 1) = 3.1; database(3, 2) = 3.2
                        database(4, 2) = 4.2; database(4, 3) = 4.3
  database(5, 1) = 5.1; database(5, 2) = 5.2; database(5, 3) = 5.3

  {
    implicit val scorer = new RecActorSocialScorer(1, 1) with SingleParent with Trust
    
    scores(1)(1.2)(1 -> (2.1 + 3.1 + 5.1) / 3)
    scores(2)(2.1, 2.2, 2.3)(1 -> (3.1 + 5.1) / 2, 2 -> (3.2 + 4.2 + 5.2) / 3, 3 -> (4.3 + 5.3) / 2)
    scores(3)(3.1, 3.2)(1 -> 5.1, 2 -> (4.2 + 5.2) / 2)
    scores(4)(4.2, 4.3)(2 -> 5.2, 3 -> 5.3)
    scores(5)(5.1, 5.2, 5.3)()
  }
  
  {
    implicit val scorer = new RecActorSocialScorer(1, 2) with SingleParent with Trust
    
    scores(1)(1.2)(
      1 -> (2.1 + 3.1 + 5.1 + 5.1) / 4
    )
    scores(2)(2.1, 2.2, 2.3)(
      1 -> (3.1 + 5.1 + 5.1) / 3,
      2 -> (3.2 + 4.2 + 5.2) / 3,
      3 -> ((4.3 + 5.3) / 2 + 4.3 + 5.3) / 3
    )
    scores(3)(3.1, 3.2)(
      1 -> (5.1 + 5.1) / 2,
      2 -> (4.2 + 5.2) / 2
    )
    scores(4)(4.2, 4.3)(
      2 -> 5.2,
      3 -> 5.3
    )
    scores(5)(5.1, 5.2, 5.3)()
  }
  

  def reviews(actor: Actor) = database.reviews.toSet.filter{ _.actor == actor }
  def reviews(actor: Actor, item: Item): Set[Review] = reviews(actor).filter{ _.item == item }
  def review(actor: Actor, item: Item) = reviews(actor, item).head
  
  def score(actor: Actor, item: Item, scores: Map[Review, Option[Score]]) = {
    scores.get(review(actor, item)).flatMap(_.map(_.value))
  }
  
  def scores(actor: Actor, without: Set[Review] = Set.empty)
            (ratings: Double*)(results: (Int, Double)*)
            (implicit scorer: ActorScorer) = 
            test("%s from %s without %s should be %s".format(scorer, actor, without, results)){
    val actorReviews = reviews(actor)
    actorReviews.map(_.rating) should be (Set(ratings: _*))
    val scores = scorer.scores(actor, actorReviews, without)
    scores should have size(results.size)
    for {
      (item, result) <- results
    }{
      score(actor, item, scores) should be (Some(result))
    }
  }
}
